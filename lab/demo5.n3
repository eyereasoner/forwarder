@prefix : <http://example.org/ns#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.

### Data

#:Alice :foo :Bar .
:Bob :bar :Foo .

### Backward -> Forward

{
    {
        false log:equalTo true.
        (?X ?Y) :hasFoo_data true.
    } => true.
    [] log:trace "saw hasFoo_data => need hasFoo_get".
} => {
    {
        false log:equalTo true.
        (?X ?Y) :hasFoo_get true.
    } => true.
}.

{
    {
        false log:equalTo true.
        (?U_24 ?U_25) :hasBar_data true.
    } => true.
    [] log:trace "saw hasBar_data => need hasBar_get" .
} => {
    {
        false log:equalTo true.
        (?U_24 ?U_25) :hasBar_get true.
    } => true.
}.

{
    {
        false log:equalTo true.
        (?U_3 true) :hasBar_get true.
    } => true.
    ?U_3 :bar ?U_4.
    [] log:trace "hasBar_get & solved (backward 1 logic) => hasBar_funktor answer" .
} => {
    ?U_3 :hasBar_funktor true.
}.

{
    ?U_18 :hasFoo_funktor ?U_19.
    [] log:trace "hasFoo_funktor exists => conclude hasFoo" .
} => {
    ?U_18 :hasFoo ?U_19.
}.

{
    ?U_22 :hasBar_funktor ?U_23.
    [] log:trace "hasBar_functor exists => conclude hasBar" .
} => {
    ?U_22 :hasBar ?U_23.
}.

{
    {
        false log:equalTo true.
        (?U_2 true) :hasFoo_get true.
    } => true.
    ?U_2 :hasBar true.
    [] log:trace "hasFoo_get & solved (backward 2 logic) => hasFoo_funktor answer" .
} => {
    ?U_2 :hasFoo_funktor true.
}.

# Generated data query by precompile inspecting the main forward rule
# if we want to know '?Who :hasFoo true .' in the head then we need to search
# for :hasFoo_data solution
{
    false log:equalTo true.
    (?U_0 true) :hasFoo_data true.
} => true.

# Generated data query by precompile inspecting the main backward rules
# if we want to know `?X :hasBar true .` in the body then we need to search
# for a hasBar_data solution
{
    false log:equalTo true.
    (?U_5 true) :hasBar_data true.
} => true.

### Main Query

{
    ?Who :hasFoo true .
    [] log:trace "**DONE**" .
}
=> 
{
    :result :is ?Who .
} .